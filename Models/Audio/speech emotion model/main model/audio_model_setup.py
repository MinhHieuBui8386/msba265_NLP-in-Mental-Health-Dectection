# -*- coding: utf-8 -*-
"""Test model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FKJGNBXjemSc9vUfdEgP-qfQ1eGPrauV
"""

import tensorflow as tf
from keras.models import load_model
import librosa
import numpy as np
import random
import math
from PIL import Image

#model_aug_t_sgd.save('model_aug_t_sgd.h5')

model_f = tf.keras.models.load_model('model_f.keras')

#model_aug_t_sgd = load_model('model_aug_t_sgd.keras')

X = []
x, sr = librosa.load('Angry1.wav', sr=44100)
X.append(x)

X = np.array(X, dtype='float')
X

def awgn(data):
    noise_amp = 0.055 * np.random.uniform() * np.amax(data)
    data += noise_amp * np.random.normal(size=data.shape[0])
    return data
def pitch(data, sr=44100, pitch_factor=0.7):
    return librosa.effects.pitch_shift(data, sr=sr, n_steps=1/pitch_factor)
def stretch(data, rate=0.8):
    return librosa.effects.time_stretch(data, rate=rate)
def time_shift(data, sr=44100, shift_limit=1):
    shift_amt = int(random.random() * shift_limit * len(data))
    return np.roll(data, shift_amt)

def data_augment(X, aug_techniques=(awgn, pitch, time_shift)):
    awgn, pitch, time_shift = aug_techniques
    X_aug = []
    for i in range(len(X)):
        X_aug.append(X[i])
        X_aug.append(awgn(time_shift(X[i])))
        X_aug.append(pitch(time_shift(X[i])))
    X_aug = np.array(X_aug, dtype='object')
    return X_aug

X_aug_train = data_augment(X)

def mel_spectrogram(X, sr=44100, spec_shape=(128, 128)):
    X_mel = []
    sgram = librosa.stft(x)
    sgram_mag, _ = librosa.magphase(sgram)
    mel_scale_sgram = librosa.feature.melspectrogram(S=sgram_mag, sr=sr)
    mel_sgram = librosa.amplitude_to_db(mel_scale_sgram, ref=np.min)

    img = Image.fromarray(mel_sgram)
    img = np.asarray(img.resize(spec_shape, resample=Image.LANCZOS))

    X_mel.append(img)

    return np.array(X_mel)

X_aug_f_train = mel_spectrogram(X_aug_train)

y_train_pred_aug_f = model_f.predict(X_aug_f_train)

print(y_train_pred_aug_f)